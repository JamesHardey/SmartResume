Product Requirements Document (PRD)
Project Title: Smart Resume Evaluator & AI Exam Platform
________________________________________
1. Objective
To create a web-based recruitment system that allows HR managers or recruiters to:
â€¢	Upload multiple resumes.
â€¢	Automatically rank resumes based on a job role using AI.
â€¢	Provide a score and reasons for each ranking.
â€¢	Pre-qualify candidates based on location.
â€¢	Allow candidates to take AI-generated, role-based exams.
â€¢	Ensure fair assessments using AI proctoring with webcam monitoring and cheating prevention mechanisms.
________________________________________
2. Users
â€¢	Admin/Recruiter
â€¢	Candidates/Applicants
________________________________________
3. Features & Workflow
________________________________________
3.1 Resume Upload & Evaluation Module
Users: Admin
Features:
â€¢	Upload multiple resumes (PDF, DOCX).
â€¢	Specify the job role and key skills.
â€¢	System extracts information using NLP (e.g., education, experience, skills).
â€¢	Rank resumes with:
o	A percentage match.
o	Clear reasons for rankings (e.g., "matched 4 of 5 key skills", "has more years of experience", etc.).
o	Highlight of strongest/weakest points per resume.
Tech Stack Suggestions:
â€¢	NLP: spaCy, GPT-4, BERT
â€¢	Backend: Next.Js
â€¢	Frontend: Next.Js
â€¢	Resume Parsing: PyMuPDF / Docx / PDFMiner
________________________________________
3.2 Pre-Qualification Module
Users: System (automated), Admin
Features:
â€¢	Filter resumes based on location (e.g., country, city, remote).
â€¢	Show only candidates who match the geo-filter.
â€¢	Mark candidates as "Qualified for Exam" or "Disqualified".
Admin Settings:
â€¢	Define acceptable locations or regions for each job role.
________________________________________
3.3 Exam Generation & Management
Users: Admin, Candidates
Features:
â€¢	Admin defines:
o	Role name
o	Pass mark (e.g., 70%)
o	Number of questions (e.g., 20 questions)
â€¢	GPT generates custom questions based on job field (e.g., Python Developer, Sales Manager).
â€¢	Multiple-choice and open-ended questions supported.
Tech Stack Suggestions:
â€¢	GPT-4 API for generating questions
â€¢	Exam Interface: Nex.Js
â€¢	Database: PostgreSQL
________________________________________
3.4 AI Proctored Exam System
Users: Candidates
Features:
â€¢	Proctoring via system webcam (requires permissions).
â€¢	Flagging of suspicious activities such as:
o	No face in frame.
o	Multiple faces detected.
o	Looking away for prolonged periods.
o	Switching tabs or windows.
Proctoring Tools:
â€¢	TensorFlow.js / OpenCV (for face detection)
â€¢	Browser event tracking (visibility API, dev tools, etc.)
Cheating Prevention:
â€¢	Disable copy-paste.
â€¢	Lock screen/tab (where possible).
â€¢	AI flags reviewed by Admin after exam.
________________________________________
3.5 Admin Dashboard
Features:
â€¢	View uploaded resumes and their rankings.
â€¢	Filter by job role, location, and match score.
â€¢	View flagged exams and candidate results.
â€¢	Modify or regenerate exam questions.
â€¢	Export qualified candidate list.
________________________________________
3.6 Candidate Dashboard
Features:
â€¢	View exam status (Pending, Scheduled, Completed).
â€¢	Take proctored exam.
â€¢	View feedback (if allowed by admin).
________________________________________
4. Non-Functional Requirements
â€¢	Scalability: Should support thousands of resumes and candidates.
â€¢	Security:
o	SSL encryption
o	Secure file storage
o	GDPR compliance
â€¢	Performance: Fast resume processing (<10 sec per file)
â€¢	Cross-browser compatibility: Chrome, Firefox, Edge
________________________________________
5. Future Enhancements
â€¢	Integration with ATS systems like Workable or Greenhouse
â€¢	AI Interview bot post-exam
â€¢	Voice command detection for cheating
â€¢	Real-time feedback via AI tutor

Updated Tech Stack
Layer	Technology	Description
Frontend	Next.js 	Handles the UI for resume uploads, dashboards, and exams.
Backend	Next.js API Routes	Handles resume parsing, ranking logic, pre-qualification, and exam generation.
Database	MySql or MongoDB	Stores resumes, candidate data, job roles, exam results.
AI/NLP	OpenAI GPT-4 + spaCy/BERT	For resume ranking and question generation.
Proctoring	TensorFlow.js + Browser APIs	Used in-browser for webcam-based cheating detection.

MVP Architecture & Code Plan (Next.js Full Stack)
________________________________________
ðŸ”¹ 1. Project Structure
bash
CopyEdit
/smart-hire-platform
â”œâ”€â”€ /app                     # Next.js App Router
â”‚   â”œâ”€â”€ /dashboard           # Admin dashboard
â”‚   â”œâ”€â”€ /candidate           # Candidate dashboard & exam area
â”‚   â”œâ”€â”€ /api
â”‚   â”‚   â”œâ”€â”€ /resumes         # Resume upload, parsing, ranking
â”‚   â”‚   â”œâ”€â”€ /prequalify      # Location filter
â”‚   â”‚   â”œâ”€â”€ /exams           # Exam generation and submission
â”‚   â”‚   â”œâ”€â”€ /proctor         # Webcam AI proctoring API (if needed)
â”œâ”€â”€ /components              # UI components
â”œâ”€â”€ /lib                     # Utils, parsing, GPT helpers
â”œâ”€â”€ /public                  # Static files
â”œâ”€â”€ /styles                  # Tailwind or global styles
â”œâ”€â”€ /prisma                  # DB schema (if using Prisma with PostgreSQL)
â”œâ”€â”€ .env                     # Env variables (e.g., DB, OpenAI key)
â”œâ”€â”€ next.config.js
________________________________________
ðŸ”¹ 2. Core Modules & Pages
âž¤ Resume Upload & Ranking (Admin)
â€¢	Page: /dashboard/resumes
â€¢	Features:
o	Upload multiple resumes.
o	Select job role.
o	Call API: /api/resumes/rank
o	Display resume scores & ranking reasons.
âž¤ Pre-Qualification Filter
â€¢	Page: /dashboard/prequalify
â€¢	Features:
o	Define allowed locations.
o	Filter resumes based on location.
o	Move qualified candidates to next stage.
âž¤ Exam Generation
â€¢	Page: /dashboard/exams
â€¢	Features:
o	Define job title, number of questions, pass mark.
o	Auto-generate questions via /api/exams/generate.
o	Assign to candidates.
âž¤ Candidate Exam Portal
â€¢	Page: /candidate/exam
â€¢	Features:
o	See assigned exams.
o	Start exam (with webcam proctoring).
o	Submit answers.
âž¤ Admin Dashboard
â€¢	Page: /dashboard
â€¢	Features:
o	View all resumes & candidate stages.
o	See flagged proctoring results.
o	Export data.
________________________________________
ðŸ”¹ 3. Database Schema (Prisma-style)
ts
CopyEdit
model Resume {
  id         String   @id @default(uuid())
  name       String
  fileUrl    String
  parsedData Json
  score      Float?
  reasons    String?
  location   String
  createdAt  DateTime @default(now())
}

model Exam {
  id         String   @id @default(uuid())
  role       String
  questions  Json
  passMark   Int
  createdAt  DateTime @default(now())
}

model Candidate {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String
  location    String
  resumeId    String?
  examId      String?
  examScore   Int?
  examPassed  Boolean?
  flagged     Boolean  @default(false)
}
________________________________________
ðŸ”¹ 4. APIs
Endpoint	Method	Description
/api/resumes/upload	POST	Upload resumes
/api/resumes/rank	POST	Parse + rank using GPT
/api/prequalify/filter	POST	Filter by location
/api/exams/generate	POST	Generate exam questions
/api/exams/submit	POST	Candidate submits exam
/api/proctor/check	POST	Send proctoring results (optional)
________________________________________
ðŸ”¹ 5. AI Integration
â€¢	Resume Scoring: Use GPT with a system prompt like: "Evaluate this resume against the role of a Frontend Developer. Score from 0â€“100, and list 3 reasons for your score."
â€¢	Exam Questions: "Generate 5 MCQs for a Data Analyst role. Each question must include options and the correct answer."
________________________________________
ðŸ”¹ 6. Proctoring Plan (Webcam Monitoring)
â€¢	Use TensorFlow.js in-browser to:
o	Detect face presence & track.
o	Count face switches (more than 1 face).
o	Flag looking away events.
o	Log window/tab switching.
â€¢	On submit, attach flags[] to candidateâ€™s result.

